from aiogram import types, executor, Dispatcher, Bot
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup
import requests
from fake_useragent import UserAgent
from PIL import Image
from pyzbar.pyzbar import decode
from PIL import Image
from Forms import form
from urllib.parse import urlparse 



TOKEN = '6109652125:AAFkN7ksm37Rm3GPVlr3r9Z2R4luowzxwHU'
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
rating = 5
abra = {}


@dp.message_handler(commands=['start'], state = form.type)
async def get_text_messages(message: types.Message, state: FSMContext):
    btn1 = types.KeyboardButton(text='–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏', resize_keyboard=True)
    btn2 = types.KeyboardButton(text='–ø—Ä–æ–≤–µ—Ä–∫–∞ QR', resize_keyboard=True)
    keyboard.add(btn1, btn2)
    await bot.send_message(message.chat.id, f'üëã–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}! –Ø —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Çü§ñ, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Å—ã–ª–∫–∏ –∏ QR-–∫–æ–¥—ã –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, —á—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å —Å–æ –º–Ω–æ–π —Ä–∞–±–æ—Ç–∞—Ç—å –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É', reply_markup=keyboard)
    await form.type.set()

@dp.message_handler(state= form.type)
async def meny1(message: types.Message, state: FSMContext):
  text = message.text
  if text == '–ø—Ä–æ–≤–µ—Ä–∫–∞ QR':
    await bot.send_message(message.chat.id, f'–ü—Ä–∏—à–ª–∏ –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ QR-–∫–æ–¥–∞')
    await form.qr.set()
  if text == '–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏':
    await bot.send_message(message.chat.id, f'–æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É')
    await form.href.set()
  if text == '/start':
    await form.start.set()
@dp.message_handler(content_types=["photo"], state= form.qr)
async def download_photo(message: types.Message):
 await message.photo[-1].download('img/am.jpg')
 try:
    
    decocdeQR = decode(Image.open('img/am.jpg'))
    a = (decocdeQR[0].data.decode('ascii'))
    await bot.send_message(message.chat.id, f'–í–æ—Ç —Å—Å—ã–ª–∫–∞ –≤–∞—à–µ–≥–æ QR –∫–æ–¥–∞ {a}, –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç—ã –æ—Ç–ø—Ä–∞–≤—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –º–Ω–µ')
    await form.href.set()   
 except:
    await bot.send_message(message.chat.id,'–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å qr, –∑–∞–Ω–æ–≤–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ')
    await form.type.set()                  
@dp.message_handler(state= form.href)
async def meny_fun(message: types.Message, state: FSMContext):
  url = message.text
  btn1 = types.KeyboardButton('–º–µ–Ω—é')
  q = ReplyKeyboardMarkup().add(btn1)
  if url == '/start':
    await form.start.set()
  abra['url'] = url
  print(abra['url'])
  await form.type.set()
  try:
        response = requests.get(abra['url'], headers={'User-Agent': UserAgent().chrome})
        parsed_url = urlparse(abra['url'])
        n  = len(parsed_url.netloc.split('.')) 
        if response.status_code == 200:
            global rating
            rating = 5
            a = '‚úÖHTTPS –¥–æ—Å—Ç—É–ø–Ω–æ'
        else:
            rating = rating - 1
            a = '‚ùåHTTPS –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ'
        try:
            r = requests.get(abra['url'], verify=True)
            ssl_cert = '‚úÖ–°—Å—ã–ª–∫–∞ –∏–º–µ–µ—Ç SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç'
        except requests.exceptions.SSLError:
            rating -= 1
            ssl_cert = '‚ùå–°—Å—ã–ª–∫–∞ –Ω–µ –∏–º–µ–µ—Ç SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞'
        if n > 2:
                
                b = '‚ùå–°—Å—ã–ª–∫–∞ –∏–º–µ–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–º–µ–Ω–∞'
                rating -= 1
        else:
             b = '‚úÖ–°—Å—ã–ª–∫–∞ –Ω–µ –∏–º–µ–µ—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ–º–µ–Ω–∞'
  except requests.exceptions.RequestException:
        await bot.send_message(message.chat.id, f'–Ω–µ–≤–µ—Ä–Ω—ã–π URL, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑')
        await form.href.set()
  finally:
        r = requests.get(abra['url'], headers={'User-Agent': UserAgent().chrome})
        if r.history:
            rating = rating - 1
            rs =  '‚ùå–ó–∞–ø—Ä–æ—Å –±—ã–ª –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω'
            abra['lastpos'] = r.status_code, r.url
        else:
            rs =  '‚úÖ–ó–∞–ø—Ä–æ—Å –Ω–µ –±—ã–ª –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω'
        if rating <= 2:
            btn1 = types.KeyboardButton(text='–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏',resize_keyboard=True)
            btn2 = types.KeyboardButton(text='–ø—Ä–æ–≤–µ—Ä–∫–∞ QR',resize_keyboard=True)
            q = ReplyKeyboardMarkup(resize_keyboard=True).add(btn1,btn2)
            await bot.send_message(message.chat.id, f'–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–∞ —Å—Å—ã–ª–∫–∞ –Ω–µ –±–µ–∑–æ–ø–∞—Å–Ω–∞.\n–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞:\n{a}\n{rs}\n{b}\n –†–µ–π—Ç–∏–Ω–≥: {rating}/5‚≠êÔ∏è', reply_markup=q)
            
            await form.type.set()
        if rating > 2:
            btn1 = types.KeyboardButton(text='–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏',resize_keyboard=True)
            btn2 = types.KeyboardButton(text='–ø—Ä–æ–≤–µ—Ä–∫–∞ QR',resize_keyboard=True)
            q = ReplyKeyboardMarkup(resize_keyboard=True).add(btn1,btn2)
            await bot.send_message(message.chat.id, f'–û—Ç–ª–∏—á–Ω–æ! –°—Å—ã–ª–∫–∞ –æ–∫–∞–∑–∞–ª–∞—Å—å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π.\n–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞:\n{ssl_cert}\n{a}\n{rs}\n{b}\n –†–µ–π—Ç–∏–Ω–≥: {rating}/5‚≠êÔ∏è ', reply_markup=q)
            
            await form.type.set()
executor.start_polling(dp)