from aiogram import types, executor, Dispatcher, Bot
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup
from Forms import form
import pyzbar.pyzbar as pyzbar
import  cv2, ssl, re, requests, urllib.request
from data_base import data, good_url, bad_url



TOKEN = '6109652125:AAFkN7ksm37Rm3GPVlr3r9Z2R4luowzxwHU'
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
keyboard = types.ReplyKeyboardMarkup()
rating = 5
abra = {}


@dp.message_handler(commands=['start'])
async def get_text_messages(message: types.Message, state: FSMContext):
    btn = types.KeyboardButton(text='–º–µ–Ω—é')
    keyboard.add(btn)
    await bot.send_message(message.chat.id, 'üëã–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–µ–ª–µ–≥—Ä–∞–º–º-–±–æ—Çü§ñ, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Å—ã–ª–∫–∏ –∏ QR-–∫–æ–¥—ã –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å, —á—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å —Å–æ –º–Ω–æ–π —Ä–∞–±–æ–∞—Ç—å –Ω–∞–ø–∏—à–∏ –≤ —á–∞—Ç ¬´–º–µ–Ω—é¬ª‚ù§Ô∏è', reply_markup=keyboard)
    await form.meny.set()

@dp.message_handler(state= form.meny)
async def meny2(message: types.Message, state: FSMContext):
  text = message.text
  if text == '–º–µ–Ω—é':
    btn1 = types.KeyboardButton('–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏')
    btn2 = types.KeyboardButton('–ø—Ä–æ–≤–µ—Ä–∫–∞ QR')
    q = ReplyKeyboardMarkup().add(btn1, btn2)
    await bot.send_message(message.chat.id, f'–ú–µ–Ω—é:\n\nüèéÔ∏è–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏\n\n‚öôÔ∏è–ø—Ä–æ–≤–µ—Ä–∫–∞ QR', reply_markup=q)
    await form.type.set()

@dp.message_handler(state= form.type)
async def meny1(message: types.Message, state: FSMContext):
  text = message.text
  btn1 = types.KeyboardButton('–º–µ–Ω—é')
  q = ReplyKeyboardMarkup().add(btn1)
  if text == '–º–µ–Ω—é':
    await bot.send_message(message.chat.id, f'–ú–µ–Ω—é:\n\nüèéÔ∏è–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏\n\n‚öôÔ∏è–ø—Ä–æ–≤–µ—Ä–∫–∞ QR', reply_markup=q)
    await form.meny.set()
  if text == '–ø—Ä–æ–≤–µ—Ä–∫–∞ QR':
    await bot.send_message(message.chat.id, f'–ü—Ä–∏—à–ª–∏ –º–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ QR-–∫–æ–¥–∞', reply_markup=q)
    await form.qr.set()
  if text == '–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏':
    await bot.send_message(message.chat.id, f'–æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É', reply_markup=q)
    await form.href.set()

@dp.message_handler(content_types=types.ContentTypes.PHOTO, state= form.qr)
async def download_photo(message: types.Message):
    image = cv2.imread("qr_code.png")
    codes = pyzbar.decode(image)
    for code in codes:
        abra['url'] = code.data.decode("utf-8")

@dp.message_handler(state= form.href)
async def meny_fun(message: types.Message, state: FSMContext):
  url = message.text
  btn1 = types.KeyboardButton('–º–µ–Ω—é')
  q = ReplyKeyboardMarkup().add(btn1)
  if url == '–º–µ–Ω—é':
    await bot.send_message(message.chat.id, f'–ú–µ–Ω—é:\n\nüèéÔ∏è–ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Å—ã–ª–∫–∏\n\n‚öôÔ∏è–ø—Ä–æ–≤–µ—Ä–∫–∞ QR', reply_markup=q)
    await form.meny.set()
  else:
    abra['url'] = url
    print(abra['url'])
    try:
        response = requests.get(abra['url'])
        if response.status_code == 200:
            rating = 5
        else:
            rating = rating - 1
    except requests.exceptions.RequestException:
        await bot.send_message(message.chat.id, f'–Ω–µ–≤–µ—Ä–Ω—ã–π URL, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –µ—â–µ —Ä–∞–∑')
        await form.href.set()
    try:
        ssl_cert = ssl.get_server_certificate((abra['url'], 443))
        print(ssl_cert)
        await bot.send_message(message.chat.id, 'SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è —Å—Å—ã–ª–∫–∏ {} –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç.'.format(abra['url']))
    except urllib.request.HTTPError:
        await bot.send_message(message.chat.id, 'SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è —Å—Å—ã–ª–∫–∏ {} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.'.format(abra['url']))
        rating = rating - 1
    finally:
        r = requests.get(abra['url'])
        if r.history:
            await bot.send_message(message.chat.id, '–ó–∞–ø—Ä–æ—Å –±—ã–ª –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω')
            for resp in r.history:
                print(resp.status_code, resp.url)
            abra['lastpos'] = r.status_code, r.url
            await form.end.set()
        else:
            rating = rating - 1
            await bot.send_message(message.chat.id, '–ó–∞–ø—Ä–æ—Å –Ω–µ –±—ã–ª –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω')
            await form.end.set()
        if rating == 2:
            btn1 = types.KeyboardButton('–º–µ–Ω—é')
            q = ReplyKeyboardMarkup().add(btn1)
            await bot.send_message(message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Å—Å—ã–ª–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å :(\n –†–µ–π—Ç–∏–Ω–≥: {rating}/5‚≠êÔ∏è', reply_markup=q)
            bad_url.append(abra['url'])
            await form.meny.set()
        if rating > 2:
            btn1 = types.KeyboardButton('–º–µ–Ω—é')
            q = ReplyKeyboardMarkup().add(btn1)
            await bot.send_message(message.chat.id, f'–£—Ä–∞! –°—Å—ã–ª–∫–∞ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∏ –æ–∫–∞–∑–∞–ª–∞—Å—å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π, —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–ø–æ–∫–æ–π–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –ø–æ –Ω–µ–π!\n –†–µ–π—Ç–∏–Ω–≥: {rating}/5‚≠êÔ∏è ', reply_markup=q)
            good_url.append(abra['url'])
            await form.meny.set()
executor.start_polling(dp) 
